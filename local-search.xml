<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker国内镜像源配置</title>
    <link href="/2025/01/21/Docker%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/21/Docker%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/docker<br><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span>,<br>        <span class="hljs-string">&quot;https://dockerproxy.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.nju.edu.cn&quot;</span><br>    ]<br>&#125;<br>EOF<br><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p>(1)如果要删除 <code>/etc/docker/daemon.json </code>文件，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -f /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>(2)如果要手动编辑 <code>/etc/docker/daemon.json </code>文件,可以进行以下手动编辑 daemon.json 的步骤：</p><p>1.使用<code>vim</code>编辑器编辑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p> 2.保存并退出:</p><p>输入Esc+ :wq 并按 Enter  (强制保存则+:wq!)</p><p>3.重启 Docker 服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="汇总国内可用镜像"><a href="#汇总国内可用镜像" class="headerlink" title="汇总国内可用镜像"></a>汇总国内可用镜像</h2><h3 id="DaoCloud-镜像站"><a href="#DaoCloud-镜像站" class="headerlink" title="DaoCloud 镜像站"></a>DaoCloud 镜像站</h3><p>加速地址：<a href="https://link.zhihu.com/?target=https://docker.m.daocloud.io">https://docker.m.daocloud.io</a></p><p>支持：Docker Hub、GCR、K8S、GHCR、Quay、NVCR 等</p><p>对外免费：是</p><h3 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h3><p>加速地址：<a href="https://link.zhihu.com/?target=https://hub-mirror.c.163.com">https://hub-mirror.c.163.com</a></p><p>支持：Docker Hub</p><p>对外免费：是</p><h3 id="Docker-镜像代理"><a href="#Docker-镜像代理" class="headerlink" title="Docker 镜像代理"></a>Docker 镜像代理</h3><p>加速地址：<a href="https://link.zhihu.com/?target=https://dockerproxy.com">https://dockerproxy.com</a></p><p>支持：Docker Hub、GCR、K8S、GHCR</p><p>对外免费：是</p><h3 id="百度云"><a href="#百度云" class="headerlink" title="百度云"></a>百度云</h3><p>加速地址：<a href="https://link.zhihu.com/?target=https://mirror.baidubce.com">https://mirror.baidubce.com</a></p><p>支持：Docker Hub</p><p>对外免费：是</p><h3 id="南京大学镜像站"><a href="#南京大学镜像站" class="headerlink" title="南京大学镜像站"></a>南京大学镜像站</h3><p>加速地址：<a href="https://link.zhihu.com/?target=https://docker.nju.edu.cn">https://docker.nju.edu.cn</a></p><p>支持：Docker Hub、GCR、GHCR、Quay、NVCR 等</p><p>对外免费：是</p><h3 id="上海交大镜像站"><a href="#上海交大镜像站" class="headerlink" title="上海交大镜像站"></a>上海交大镜像站</h3><p>加速地址：<a href="https://link.zhihu.com/?target=https://docker.mirrors.sjtug.sjtu.edu.cn/">https://docker.mirrors.sjtug.sjtu.edu.cn/</a></p><p>支持：Docker Hub、GCR 等</p><p>限制：无</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker部署MySQL并实现远程连接</title>
    <link href="/2025/01/20/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2-Docker%E9%83%A8%E7%BD%B2MySQL/"/>
    <url>/2025/01/20/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2-Docker%E9%83%A8%E7%BD%B2MySQL/</url>
    
    <content type="html"><![CDATA[<p><strong>1.编写好dockerfile文件</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#指定基础镜像</span><br><span class="hljs-keyword">FROM</span> mysql:latest<br><br><span class="hljs-comment">#设置初始环境变量</span><br><span class="hljs-keyword">ENV</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span><br><br><span class="hljs-keyword">ENV</span> MYSQL_DATABASE=database<br><br><span class="hljs-comment">#用于将初始化脚本 init.sql 复制到 MySQL 容器的 /docker-entrypoint-initdb.d/ 目录中。当 #MySQL 容器启动时，它会自动执行该目录下的所有 SQL 脚本文件，从而完成数据库的初始化。</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> init.sql /docker-entrypoint-initdb.d/</span><br><br><span class="hljs-comment">#EXPOSE指令用于在Dockerfile中声明容器在运行时监听的网络端口，但它并不会自动暴露端口，也不会将容</span><br><span class="hljs-comment">#器内部的端口映射到宿主机上。其主要作用是提供一种方式，让开发者和其他人能够清楚地了解该容器需要开</span><br><span class="hljs-comment">#放哪些端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3306</span> <br></code></pre></td></tr></table></figure><p><strong>2.创建容器并运行</strong></p><p>这里先切换到了我自己的MySQLDocker目录</p><p> <img src="/img/articles/18.png"> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> MySQLDocker<br></code></pre></td></tr></table></figure><p>（1）以下命令用于从当前目录下的 Dockerfile 构建一个新的 Docker 镜像，并将其命名为 <code>mysql-image</code>。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">docker build -t mysql-image .<br></code></pre></td></tr></table></figure><h6 id="详细解释："><a href="#详细解释：" class="headerlink" title="详细解释："></a><strong>详细解释</strong>：</h6><ul><li>**<code>docker build</code>**：<ul><li>这是 Docker 的一个命令，用于根据 Dockerfile 构建一个新的镜像。</li></ul></li><li>**<code>-t mysql-image</code>**：<ul><li><code>-t</code> 是 <code>--tag</code> 的简写，用于为构建的镜像指定一个名称（和可选的标签）。在这里，镜像的名称是 <code>mysql-image</code>。如果想指定一个标签（例如版本号），可以写成 <code>-t mysql-image:1.0</code>。</li></ul></li><li>**<code>.</code>**：<ul><li>表示当前目录。Docker 会在这个目录下查找 <code>Dockerfile</code>，并使用它来构建镜像。这个目录也被称为构建上下文（build context）。Docker 会将当前目录下的文件和文件夹发送到 Docker 守护进程，因此确保当前目录中包含所有需要的文件（如 <code>Dockerfile</code> 和初始化脚本）。</li></ul></li></ul><p>（2）以下命令用于从 <code>mysql-image</code> 镜像创建并启动一个新的 Docker 容器，并将其命名为 <code>mysql-container</code>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name mysql-container -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -d mysql-image<br></code></pre></td></tr></table></figure><h6 id="详细解释：-1"><a href="#详细解释：-1" class="headerlink" title="详细解释："></a><strong>详细解释</strong>：</h6><ul><li>**<code>docker run</code>**：<ul><li>用于创建并启动一个新的 Docker 容器。</li></ul></li><li>**<code>--name mysql-container</code>**：<ul><li>为容器指定一个名称（<code>mysql-container</code>），便于后续操作。</li></ul></li><li>**<code>-p 3306:3306</code>**：<ul><li>将容器的 3306 端口映射到宿主机的 3306 端口。这意味着可以从宿主机或其他机器通过 <code>宿主机IP:3306</code> 访问容器中的 MySQL 服务。</li><li>格式为 <code>-p 宿主机端口:容器端口</code>。</li></ul></li><li>**<code>-d mysql-image</code>**：<ul><li><code>-d</code> 表示以 <strong>detached</strong> 模式运行容器（即在后台运行）。</li><li><code>mysql-image</code> 是刚刚构建的镜像名称，Docker 将使用它来创建容器。</li></ul></li></ul><p><strong>3.进入正在运行的 <code>mysql-container</code> 容器和进入 MySQL 的交互式命令行界面</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">docker <span class="hljs-keyword">exec</span> -it mysql-<span class="hljs-keyword">container</span> mysql -uroot -p123456<br></code></pre></td></tr></table></figure><h6 id="详细解释：-2"><a href="#详细解释：-2" class="headerlink" title="详细解释："></a><strong>详细解释</strong>：</h6><ul><li>**<code>docker exec</code>**：<ul><li>用于在正在运行的容器中执行命令。</li></ul></li><li>**<code>-it</code>**：<ul><li><code>-i</code> 表示交互式模式，允许用户与容器内的命令交互。</li><li><code>-t</code> 分配一个伪终端，使用户能够像在本地终端中一样操作。</li></ul></li><li>**<code>mysql-container</code>**：<ul><li>指定目标容器的名称（即之前创建的 <code>mysql-container</code>）。</li></ul></li><li>**<code>mysql -uroot -p123456</code>**：<ul><li>在容器内执行的命令，用于启动 MySQL 客户端。</li><li><code>-u root</code> 表示以 <code>root</code> 用户登录 MySQL。</li><li><code>-p123456</code> 表示 <code>root</code> 用户的密码是 <code>123456</code>。</li></ul></li></ul><p><strong>4.创建数据库用户并配置实现远程连接</strong>(MySQL 8.0及以上)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> hhh@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.02</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> hhh@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt; flush <span class="hljs-keyword">privileges</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网站部署</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>运行安卓项目通用配置（java）</title>
    <link href="/2024/12/29/%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/12/29/%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p> <img src="/img/articles/Android/1.jpg"> </p><p> <img src="/img/articles/Android/2.jpg"> </p><p> <img src="/img/articles/Android/3.jpg"> </p><p> <img src="/img/articles/Android/4.jpg"> </p><p> <img src="/img/articles/Android/5.jpg"> </p><p> <img src="/img/articles/Android/6.jpg"> </p>]]></content>
    
    
    <categories>
      
      <category>配置各类环境所遇问题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux服务器JDK安装和环境变量配置</title>
    <link href="/2024/12/07/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2-JDK%E5%AE%89%E8%A3%85/"/>
    <url>/2024/12/07/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2-JDK%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p><strong>1.安装JDK</strong>：</p><ul><li><p>对于CentOS，使用如下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo yum install java-1.8.0-openjdk-devel<br></code></pre></td></tr></table></figure></li><li><p>这将安装OpenJDK 8，包括<code>javac</code>编译器。</p></li></ul><p><strong>2.配置环境变量</strong>：</p><ul><li><p>安装完成后，需要配置JAVA_HOME环境变量,可以通过查找java命令的路径来确定JDK的安装位置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo update-alternatives --config java<br></code></pre></td></tr></table></figure></li></ul><p>​      如下图示例：</p><p><img src="/img/articles/13.png"> </p><ul><li><p>使用文本编辑器打开<code>.bashrc</code>文件，例如使用<code>vi</code>（按i开启编辑，Esc+:wq保存+Enter退出）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">vi ~/.bashrc<br></code></pre></td></tr></table></figure></li></ul><p>​       添加以下行到文件中：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.412.b08-1.el7_9.x86_64<br>export PATH=$PATH:$JAVA_HOME/bin<br></code></pre></td></tr></table></figure><p>​      如下图示例：</p><p><img src="/img/articles/14.png"> </p><p>​     使更改生效，运行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">source ~/.bashrc<br></code></pre></td></tr></table></figure><p><strong>3.验证环境变量</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">echo $JAVA_HOME<br>echo $PATH<br></code></pre></td></tr></table></figure><p><strong>4.测试<code>javac</code>命令</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">javac -version<br></code></pre></td></tr></table></figure><p><strong>配置成功如下图</strong>：</p><p><img src="/img/articles/15.png"> </p><p>另外，再补充一部分以下是MySQL 8版本创建用户（赋予所有访问权限）的方法（刷新权限是flush privileges）</p><p><img src="/img/articles/16.png"> </p><p>面板也可相应创建</p>]]></content>
    
    
    <categories>
      
      <category>网站部署</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>UML课设</title>
    <link href="/2024/11/17/UML%E8%AF%BE%E8%AE%BE/"/>
    <url>/2024/11/17/UML%E8%AF%BE%E8%AE%BE/</url>
    
    <content type="html"><![CDATA[<p>课题：</p><p>利用面向对象思维与Python语言，设计一个仿真系统<br>1设计思路汇报<br>2.编程实现</p>]]></content>
    
    
    <categories>
      
      <category>面向对象分析与设计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实战后端接入物联网API</title>
    <link href="/2024/11/16/%E7%89%A9%E8%81%94%E7%BD%91API%E6%8E%A5%E5%85%A5%E5%90%8E%E7%AB%AF/"/>
    <url>/2024/11/16/%E7%89%A9%E8%81%94%E7%BD%91API%E6%8E%A5%E5%85%A5%E5%90%8E%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>团队项目有一个业务要获取阿里云物联网平台上面的传感器数据，代码使用java，采用springboot框架，阿里云物联网平台上一个产品下的一个设备只能连接真实设备或者代码服务端，于是我采用数据流转的方式将数据流转到一个设备中，服务端订阅该设备的<strong>Topic</strong>。</p><p><strong>这里先讲讲我在接入真实设备并将数据信息上传到阿里云的云端平台设备，但是后端会被挤掉线的问题的解决方式:</strong></p><p><em>以下是相关记录</em></p><ol><li><p>解决了后端连接阿里云物联网平台掉线问题，能够收到真实设备所发的信息</p><p><img src="/img/articles/9.png"></p></li></ol><p>解决方式：</p><p>a.在阿里云物联网平台使用同一个产品密钥又再建立了一台新设备，将真实设备传到的阿里云端（之前建好设备）的消息再进行一次转发到新设备，使后端连接这台新备进行消息接收并且不会掉线。</p><p>  <img src="/img/articles/10.png"> </p><p>b.后端接收消息流程如下（采用MQTT协议,只允许一对一的连接，若有多个连接，会把先连接的下线掉）：</p><p>  <img src="/img/articles/11.png"> </p><h2 id="阿里云创建"><a href="#阿里云创建" class="headerlink" title="阿里云创建"></a>阿里云创建</h2><p>首先创建一个产品，用于测试使用，直接选择一个标准品类，品类有温度和湿度属性（实际使用需要按需求自定义产品），节点类型为了方便选的直连设备。</p><p>产品创建完成之后点击<strong>查看</strong>，点击<strong>功能定义</strong>模块，编辑草稿，添加刚才选择的标准产品的两个标准功能，也可以添加自定义功能看自己选择，这边只使用温度和湿度。</p><p>发布完成之后进入Topic 类列表的自定义Topic 部分</p><p>定义一个Topic类，便于后面通过该Topic流转到服务器端，操作权限为发布和订阅，命名为tento(按照自己需求命名)，点击确认就定义完成了。</p><p>之后为这个产品添加两个设备（一个真实设备，一个服务器设备（一个用来收真实设备的信息，一个用来将真实设备的信息转过来节接收）），实际使用可以创建多个真实设备，数据流转到一个服务器设备中就可以了，为了方便这边只创建两个设备测试。直接添加，DeviceName让他随机生成。</p><p>创建一个解析器（在云产品流转那里）</p><p>点击查看这个数据源，添加Topic，因为我要获取真实设备的数据，所以选择物模型数据上报的Topic，设备DeviceName选择刚才创建的真实设备，最后选择post。这样数据源就完成了</p><p>然后进入数据目的，点击关联数据目的</p><p>和刚才操作类似点击关联数据目的—-&gt;创建数据目的，产品选择我们一开始创建的产品，操作为发送到另一个Topic。</p><p>最后是解析器脚本，会有一个草稿，脚本中的writeIotTopic(1004），<strong>1004是自动生成的，自己的代码不要改这个</strong></p><p>改为</p><p>只更改了&#x2F;k1a8gKQzYMD&#x2F;ejP0IrtXk49UIMz7Wsn1&#x2F;user&#x2F;tento是刚才咱们自定义的Topic，k1a8gKQzYMD为产品的ProductKey，ejP0IrtXk49UIMz7Wsn1为服务端设备的DeviceName，点击发布就完成了这个解析器，解析器一定要点击启动才会生效。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>开两个设备模拟器</p><p>真实设备端</p><p>服务器端</p><p>服务器端订阅刚才自定义的Topic</p><p>点击订阅之后，右边日志会显示订阅的Topic <strong>(订阅这一步不能省)</strong></p><p>再回到真实设备的模拟器（<strong>服务器模拟器不要关</strong>，<strong>开两个网页</strong>），输入温度湿度数据之后，点击提交，模拟真实设备提交数据。</p><p>真实设备提交数据之后，刚才服务器设备的模拟器订阅了这个消息，就会收到消息。</p><p>消息中包括刚才真实设备上传的温度湿度，还包括真实设备的deviceName，这样如果多个真实设备上传数据，全部流转到服务器端，服务器端就是知道真实设备是哪一个，上传的数据是多少。</p>]]></content>
    
    
    <categories>
      
      <category>物联网API接入</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>后端接入讯飞星火API</title>
    <link href="/2024/11/16/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8E%A5%E5%85%A51/"/>
    <url>/2024/11/16/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8E%A5%E5%85%A51/</url>
    
    <content type="html"><![CDATA[<p>如何引入？先看官方文档</p><p><a href="https://www.xfyun.cn/doc/spark/Web.html#_2-function-call%E8%AF%B4%E6%98%8E:~:text=%23-,3.%20%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B,-%E6%B3%A8%3A%20demo%E5%8F%AA%E6%98%AF">https://www.xfyun.cn/doc/spark/Web.html#_2-function-call%E8%AF%B4%E6%98%8E:~:text=%23-,3.%20%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B,-%E6%B3%A8%3A%20demo%E5%8F%AA%E6%98%AF</a></p><p>我建议引入其他大佬写好的 sdk ，GitHub 地址：<a href="https://github.com/briqt/xunfei-spark4j">https://github.com/briqt/xunfei-spark4j</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--修改version为最新稳定版--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.briqt<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xunfei-spark4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>调用的话，不使用硬编码，而是把相关信息写在配置文件里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">SparkClient sparkClient=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SparkClient</span>();<br><br><span class="hljs-comment">// 设置认证信息</span><br>sparkClient.appid=<span class="hljs-string">&quot;&quot;</span>;<br>sparkClient.apiKey=<span class="hljs-string">&quot;&quot;</span>;<br>sparkClient.apiSecret=<span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>config 文件，读取我们配置的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;xunfei.client&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XingHuoConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> String appid;<br>    <span class="hljs-keyword">private</span> String apiSecret;<br>    <span class="hljs-keyword">private</span> String apiKey;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SparkClient <span class="hljs-title function_">sparkClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SparkClient</span> <span class="hljs-variable">sparkClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SparkClient</span>();<br>        sparkClient.setApiKey(apiKey);<br>        sparkClient.setApiSecret(apiSecret);<br>        sparkClient.setAppid(appid);<br>        <span class="hljs-keyword">return</span> sparkClient;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果生成的内容不符合自己的预期，解决方法：给他一个符合标准的例子, 虽然有耗费 token 但是暂时没想到更好的方式</p><p>这个 PRECONDITION 是我在 service 调用之前手动拼接到 content 前面，没太深入了解是不是能提前指定预设😅</p><p>AI 服务类相关的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Aiservice</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> SparkClient sparkClient;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ClientV4 clientV4;<br><br>    <span class="hljs-comment">// 稳定的随机数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">STABLE_TEMPERATURE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.05f</span>;<br><br>    <span class="hljs-comment">//预设角色</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PRECONDITION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你是一个$&#123;角色定义&#125;，接下来我会按照以下固定格式给你提供内容：\n&quot;</span> +。。。。 + <span class="hljs-string">&quot;下面是一个具体的例子的模板：&quot;</span>+;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 星火AI 对话</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMesToAIUseXingHuo</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String content)</span> &#123;<br>        List&lt;SparkMessage&gt; messages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        messages.add(SparkMessage.userContent(content));<br>        <span class="hljs-comment">// 构造请求</span><br>        <span class="hljs-type">SparkRequest</span> <span class="hljs-variable">sparkRequest</span> <span class="hljs-operator">=</span> SparkRequest.builder()<br>                <span class="hljs-comment">// 消息列表</span><br>                .messages(messages)<br>                <span class="hljs-comment">// 模型回答的tokens的最大长度,非必传,取值为[1,4096],默认为2048</span><br>                .maxTokens(<span class="hljs-number">2048</span>)<br>                <span class="hljs-comment">// 核采样阈值。用于决定结果随机性,取值越高随机性越强即相同的问题得到的不同答案的可能性越高 非必传,取值为[0,1],默认为0.5</span><br>                .temperature(<span class="hljs-number">0.2</span>)<br>                <span class="hljs-comment">// 指定请求版本，默认使用最新2.0版本</span><br>                .apiVersion(SparkApiVersion.V3_5)<br>                .build();<br>        <span class="hljs-comment">// 同步调用</span><br>        <span class="hljs-type">SparkSyncChatResponse</span> <span class="hljs-variable">chatResponse</span> <span class="hljs-operator">=</span> sparkClient.chatSync(sparkRequest);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">responseContent</span> <span class="hljs-operator">=</span> chatResponse.getContent();<br>        log.info(<span class="hljs-string">&quot;星火 AI 返回的结果 &#123;&#125;&quot;</span>, responseContent);<br>        <span class="hljs-keyword">return</span> responseContent;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AI大模型接入</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>多环境概念理解</title>
    <link href="/2024/11/16/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2-%E5%A4%9A%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/11/16/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2-%E5%A4%9A%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h3 id="一：多环境概念："><a href="#一：多环境概念：" class="headerlink" title="一：多环境概念："></a>一：多环境概念：</h3><p>是指根据项目的不同阶段和需求，将项目部署在不同的环境中，以确保各环境之间相互独立且互不影响。多环境设计的主要目的是为了在不同的开发、测试和部署阶段中，确保项目的稳定性和可靠性。</p><h4 id="省流：根据实际需要，对项目阶段进行部署，相互独立且互相不影响。"><a href="#省流：根据实际需要，对项目阶段进行部署，相互独立且互相不影响。" class="headerlink" title="省流：根据实际需要，对项目阶段进行部署，相互独立且互相不影响。"></a>省流：<strong>根据实际需要，对项目阶段进行部署，相互独立且互相不影响。</strong></h4><h5 id="多环境的分类："><a href="#多环境的分类：" class="headerlink" title="多环境的分类："></a>多环境的分类：</h5><ol><li>本地环境(自己的电脑）localhost（熟悉的localhost）</li><li>开发环境：公司连同一台机器，方便开发</li><li>测试环境：性能测试&#x2F;功能测试&#x2F;系统集成测试</li><li>预发布环境（体验服）：用正式服的数据再进行测试</li><li>正式环境（线上，公开访问的项目）</li><li>沙箱环境：目的就是为了做实验（做完就销毁）</li></ol><h3 id="二：前端配置多环境："><a href="#二：前端配置多环境：" class="headerlink" title="二：前端配置多环境："></a>二：前端配置多环境：</h3><h5 id="1：请求地址："><a href="#1：请求地址：" class="headerlink" title="1：请求地址："></a>1：请求地址：</h5><ul><li>开发环境：localhost:8000</li><li>线上环境：域名或者公网ip</li></ul><p><strong>2：启动方式：</strong>（本人习惯使用npm）<br>npm run start </p><p>通常用于启动开发服务器或者应用程序的开发模式。这个命令一般会启动一个开发服务器，监听文件变化并自动重新加载应用，以方便开发人员在开发过程中进行实时调试。这个命令通常用于开发阶段，不会对代码进行优化和压缩，以便开发人员能够方便地调试和查看代码变化。</p><p>npm run build </p><p>通常用于构建生产环境下的部署包。这个命令会对项目代码进行优化、压缩和打包，以减小文件大小并提高运行效率。通常会生成用于部署的静态文件，准备好被部署到生产服务器上。这个命令一般在项目准备发布时执行，以确保发布的代码是经过优化和压缩的<br><strong>3：项目的配置：</strong></p><p> 不同的项目（框架）都有不同的配置文件，可以在配置文件后添加对应的环境名称后缀来区分开发环境和生产环境。</p><p>以vue项目举例，<code>NODE_ENV</code>环境变量通常用于指示当前的环境，是否为开发环境或生产环境。在开发环境中，通常会设置<code>NODE_ENV</code>为<code>development</code>，而在生产环境中设置为<code>production</code>。</p><p>build 时会自动传入 NODE_ENV &#x3D;&#x3D; production 参数</p><p>所以我们的思路是什么呢</p><p>我们可以在前端的拦截器上加一个判断条件，如果NODE_ENV是等于这个production的，我们就转到我们想要转的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">const isDev = process.env.NODE_ENV === &#x27;development&#x27;;<br>const Service = axios.create(&#123;<br>    baseURL: isDev ? &#x27;http://localhost:8089/&#x27; : &#x27;http://公网ip或者域名&#x27;,<br>    withCredentials: true,<br>&#125;);<br>Service.defaults.withCredentials = true;<br></code></pre></td></tr></table></figure><p>一般上线的话，需要运行<strong>build 进行打包构建，然后生成一个dist文件</strong></p><p>随后，可以在项目终端使用 serve 工具启动（npm i -g serve，先安装），浏览打包好了的文件 </p><h3 id="三：后端配置多环境："><a href="#三：后端配置多环境：" class="headerlink" title="三：后端配置多环境："></a>三：后端配置多环境：</h3><h5 id="后端和前端一样都需要配置文件："><a href="#后端和前端一样都需要配置文件：" class="headerlink" title="后端和前端一样都需要配置文件："></a>后端和前端一样都需要配置文件：</h5><p>SpringBoot 项目，通过 application.yml 添加不同的后缀来区分配置文件(如application-prod.yml作为线上配置 )</p><h5 id="然后我们运行maven中的package，对项目进行打包"><a href="#然后我们运行maven中的package，对项目进行打包" class="headerlink" title="然后我们运行maven中的package，对项目进行打包"></a>然后我们运行maven中的package，对项目进行打包</h5><p>另外，如果单元测试不重要，我们就可以点击跳过测试模式这个按钮。</p><p> 打包完之后，我们在这个打包出来的文件夹（target）的终端中输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -jar .\backend-<span class="hljs-number">0.0</span><span class="hljs-number">.1</span>-SNAPSHOT.jar --spring.profiles.active=prod<br></code></pre></td></tr></table></figure><p>那一行代码的意思就是往里传了一个环境参数，运行后就会切换到线上配置</p>]]></content>
    
    
    <categories>
      
      <category>网站部署</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于IDEA的mysql驱动文件下载失败的解决办法（来自以前的csdn）</title>
    <link href="/2024/11/12/%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%981/"/>
    <url>/2024/11/12/%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%981/</url>
    
    <content type="html"><![CDATA[<p>第一步，在官网上找到如图</p><p> <img src="/img/articles/1.png"> </p><p> 第二步 </p><p><img src="/img/articles/2.png"></p><p> 第三步</p><p>将下载好的驱动文件先解压然后再复制到安装IDEA的文件目录下面</p><p><img src="/img/articles/3.png"></p><p>最后，再回去IDEA点击驱动的下载</p><p>成功如图</p><p><img src="/img/articles/4.png"></p>]]></content>
    
    
    <categories>
      
      <category>配置各类环境所遇问题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
